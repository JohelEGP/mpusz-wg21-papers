<pre class='metadata'>
Title: Precalculated hash values in lookup
Shortname: P0920
Revision: 0
Status: P
Group: WG21
Audience: LEWG, LWG
URL: http://wg21.link/P0920r0
Editor: Mateusz Pusz, Epam Systems http://www.epam.com, mateusz.pusz@gmail.com, http://www.train-it.eu
Abstract: This proposal extends the interface of unordered containers with the member function overloads that
    have one additional argument taking a precalculated hash value for the value being queried. 
Repository: mpusz/wg21_papers
!Source: <a href="https://github.com/mpusz/wg21_papers/blob/master/src/0920_precalculated_hash_values_in_lookup.bs">github.com/mpusz/wg21_papers/blob/master/src/0920_precalculated_hash_values_in_lookup.bs</a>
Markup Shorthands: markdown on
</pre>


Motivation and Scope {#motivation-and-scope}
============================================

In business scenarios it often happens that we have to look for the same keyword in more than one container at a time.
Doing that is expensive right now as it forces hash value recalculation on every lookup.

With the changes proposed by this paper the following code will calculate the hash value only once per each run
of the function `update()`:

```cpp
std::array<std::unordered_map<std::string, int>, array_size> maps;
    
void update(const std::string& user)
{
  const auto hash = maps[0].hash_function()(user);
  for(auto& m : maps) {
    auto it = m.find(user, hash);
    // ...
  }
}
```


Prior Work {#prior-work}
========================

Proposed feature was implemented in the [tsl::hopscotch_map](https://github.com/Tessil/hopscotch-map) and proved
to deliver significant performance improvements.


Impact On The Standard {#impact}
================================

This proposal modifies the unordered associative containers in `<unordered_map>` and `<unordered_set>` by
overloading the lookup member functions with member function templates having one additional parameter.

There are no language changes. 

All existing C++17 code is unaffected.


Considered Alternatives {#alternatives}
====================================

Stateful hash object {#stateful-hash}
--------------------

Similar behavior can be obtained with usage of a stateful hash object that introduces additional branch on every lookup:

```cpp
template<typename Key, typename Hash>
struct hash_cache {
  std::pair<Key, std::size_t> cache;
  std::size_t operator()(const Key& k) const
  {
    if(k != cache.first)
      cache = std::pair(k, Hash()(k));
    return cache.second;
  }
};
```

However, the case complicates in a multithreaded environment where synchronization has to be introduced to
such a `hash_cache` helper class:

```cpp
template<typename Key, typename Hash>
struct hash_cache {
  mutable std::mutex m;
  std::pair<Key, std::size_t> cache;
  std::size_t operator()(const Key& k) const
  {
    std::size_t val{};
    {
      std::scoped_lock lock(m);
      if (k != cache.first)
        cache = std::pair(k, Hash()(k));
      val = cache.second;
    }
    return val;
  }
};
```

Another problem with that solution happens in the case of the heterogeneous lookup introduced by [[p0919r2]]:

```cpp
struct string_hash {
  using transparent_key_equal = std::equal_to<>;
  std::pair<???, ???> cache;
  std::size_t operator()(std::string_view txt) const;
  std::size_t operator()(const std::string& txt) const;
  std::size_t operator()(const char* txt) const;
};
```

In such a case there is no one good `Key` type to be used for storage in a cache. Additional conversions and object
constructions will always be involved which negates all benefits of having the heterogeneous lookup feature. 



Proposed Wording {#wording}
===========================

The proposed changes are relative to the working draft of the standard as of [[!n4762]] and to changes proposed
by [[p0919r2]] that was accepted by the LEWG in Jacksonville 2018.

Modify **21.2.7 [unord.req]** paragraph 11 as follows:

<blockquote>
..., `k` denotes a value of type `key_type`,
`ke` is a value such that (1) `eq(r, ke) == eq(ke, r)` with `r` the key value of `e` and `e` in `a_tran`,
(2) `hf(r) == hf(ke)` if `eq(r, ke)` is `true`, and (3) `eq(r, ke) && eq(r, r') == eq(r', ke)` where `r'` is
also the key of an element in `a_tran`,
<INS>
`hk` is a precalculated hash value for `k` using object of a type `hasher`, `hke` is a precalculated hash value
for `ke` using object of a type `hasher`,
</INS>
`hf` denotes a possibly `const` value of type `hasher`, ...
</blockquote>

Modify table 91 in section **21.2.7 [unord.req]** as follows:

<blockquote>

<table>
  <tr>
    <th>Expression</th>
    <th>Return type</th>
    <th>Assertion/note pre-/post-condition</th>
    <th>Complexity</th>
  </tr>
  <tr>
    <td>`b.find(k)`</td>
    <td>`iterator`; `const_iterator` for const `b`.</td>
    <td>Returns an iterator pointing to an element with key equivalent to `k`, or `b.end()` 
        if no such element exists.</td>
    <td>Average case O(1), worst case O(`b.size()`).</td>
  </tr>
  <tr>
    <td><ins>`b.find(k, hk)`</ins></td>
    <td><ins>`iterator`; `const_iterator` for const `b`.</ins></td>
    <td><ins>Returns an iterator pointing to an element with key equivalent to `k`, or `b.end()` 
        if no such element exists.</ins></td>
    <td><ins>Average case O(1), worst case O(`b.size()`).</ins></td>
  </tr>
  <tr>
    <td>`a_tran.find(ke)`</td>
    <td>`iterator`; `const_iterator` for const `a_tran`.</td>
    <td>Returns an iterator pointing to an element with key `r` such that `eq(r, ke)`,
    or `a_tran.end()` if no such element exists.</td>
    <td>Average case O(1), worst case O(`a_tran.size()`).</td>
  </tr>
  <tr>
    <td><ins>`a_tran.find(ke, hke)`</ins></td>
    <td><ins>`iterator`; `const_iterator` for const `a_tran`.</ins></td>
    <td><ins>Returns an iterator pointing to an element with key `r` such that `eq(r, ke)`,
    or `a_tran.end()` if no such element exists.</ins></td>
    <td><ins>Average case O(1), worst case O(`a_tran.size()`).</ins></td>
  </tr>
  <tr>
    <td>`b.count(k)`</td>
    <td>`size_type`</td>
    <td>Returns the number of elements with key equivalent to `k`.</td>
    <td>Average case O(`b.count(k)`), worst case O(`b.size()`).</td>
  </tr>
  <tr>
    <td><ins>`b.count(k, hk)`</ins></td>
    <td><ins>`size_type`</ins></td>
    <td><ins>Returns the number of elements with key equivalent to `k`.</ins></td>
    <td><ins>Average case O(`b.count(k)`), worst case O(`b.size()`).</ins></td>
  </tr>
  <tr>
    <td>`a_tran.count(ke)`</td>
    <td>`size_type`</td>
    <td>Returns the number of elements with key `r` such that `eq(r, ke)`.</td>
    <td>Average case O(`a_tran.count(ke)`), worst case O(`a_tran.size()`).</td>
  </tr>
  <tr>
    <td><ins>`a_tran.count(ke, hke)`</ins></td>
    <td><ins>`size_type`</ins></td>
    <td><ins>Returns the number of elements with key `r` such that `eq(r, ke)`.</ins></td>
    <td><ins>Average case O(`a_tran.count(ke)`), worst case O(`a_tran.size()`).</ins></td>
  </tr>
  <tr>
    <td>`b.contains(k)`</td>
    <td>bool</td>
    <td>Equivalent to `b.find(k) != b.end()`</td>
    <td>Average case O(1), worst case O(`b.size()`)</td>
  </tr>
  <tr>
    <td><ins>`b.contains(k, hk)`</ins></td>
    <td><ins>bool</ins></td>
    <td><ins>Equivalent to `b.find(k, hk) != b.end()`</ins></td>
    <td><ins>Average case O(1), worst case O(`b.size()`)</ins></td>
  </tr>
  <tr>
    <td>`a_tran.contains(ke)`</td>
    <td>bool</td>
    <td>Equivalent to `a_tran.find(ke) != a_tran.end()`</td>
    <td>Average case O(1), worst case O(`a_tran.size()`)</td>
  </tr>
  <tr>
    <td><ins>`a_tran.contains(ke, hke)`</ins></td>
    <td><ins>bool</ins></td>
    <td><ins>Equivalent to `a_tran.find(ke, hk) != a_tran.end()`</ins></td>
    <td><ins>Average case O(1), worst case O(`a_tran.size()`)</ins></td>
  </tr>
  <tr>
    <td>`b.equal_range(k)`</td>
    <td>`pair<iterator, iterator>`; `pair<const_iterator, const_iterator>` for const `b`.</td>
    <td>Returns a range containing all elements with keys equivalent to `k`. Returns
        `make_pair(b.end(), b.end())` if no such elements exist.</td>
    <td>Average case O(`b.count(k)`), worst case O(`b.size()`).</td>
  </tr>
  <tr>
    <td><ins>`b.equal_range(k, hk)`</ins></td>
    <td><ins>`pair<iterator, iterator>`; `pair<const_iterator, const_iterator>` for const `b`.</ins></td>
    <td><ins>Returns a range containing all elements with keys equivalent to `k`. Returns
        `make_pair(b.end(), b.end())` if no such elements exist.</ins></td>
    <td><ins>Average case O(`b.count(k)`), worst case O(`b.size()`).</ins></td>
  </tr>
  <tr>
    <td>`a_tran.equal_range(ke)`</td>
    <td>`pair<iterator, iterator>`; `pair<const_iterator, const_iterator>` for const `a_tran`.</td>
    <td>Returns a range containing all elements with keys `k` such that `eq(k, ke)` is `true`. Returns
        `make_pair(a_tran.end(), a_tran.end())` if no such elements exist.</td>
    <td>Average case O(`a_tran.count(k)`), worst case O(`a_tran.size()`).</td>
  </tr>
  <tr>
    <td><ins>`a_tran.equal_range(ke, hke)`</ins></td>
    <td><ins>`pair<iterator, iterator>`; `pair<const_iterator, const_iterator>` for const `a_tran`.</ins></td>
    <td><ins>Returns a range containing all elements with keys `k` such that `eq(k, ke)` is `true`. Returns
        `make_pair(a_tran.end(), a_tran.end())` if no such elements exist.</ins></td>
    <td><ins>Average case O(`a_tran.count(k)`), worst case O(`a_tran.size()`).</ins></td>
  </tr>
</table>

</blockquote>


In **21.5.4.1 [unord.map.overview]** add:

<blockquote>
<pre>
// map operations:
iterator       find(const key_type& k);
const_iterator find(const key_type& k) const;
<ins>iterator       find(const key_type& k, size_t hash);
const_iterator find(const key_type& k, size_t hash) const;</ins>
template &lt;class K> iterator       find(const K& k);
template &lt;class K> const_iterator find(const K& k) const;
<ins>template &lt;class K> iterator       find(const K& k, size_t hash);
template &lt;class K> const_iterator find(const K& k, size_t hash) const;</ins>
size_type count(const key_type& k) const;
<ins>size_type count(const key_type& k, size_t hash) const;</ins>
template &lt;class K> size_type count(const K& k) const;
<ins>template &lt;class K> size_type count(const K& k, size_t hash) const;</ins>
bool contains(const key_type& k) const;
<ins>bool contains(const key_type& k, size_t hash) const;</ins>
template &lt;class K> bool contains(const K& k) const;
<ins>template &lt;class K> bool contains(const K& k, size_t hash) const;</ins>
pair&lt;iterator, iterator>             equal_range(const key_type& k);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k) const;
<ins>pair&lt;iterator, iterator>             equal_range(const key_type& k, size_t hash);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k, size_t hash) const;</ins>
template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k) const;
<ins>template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k, size_t hash);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k, size_t hash) const;</ins>
</pre>
</blockquote>

In **21.5.5.1 [unord.multimap.overview]** add:

<blockquote>
<pre>
// map operations:
iterator       find(const key_type& k);
const_iterator find(const key_type& k) const;
<ins>iterator       find(const key_type& k, size_t hash);
const_iterator find(const key_type& k, size_t hash) const;</ins>
template &lt;class K> iterator       find(const K& k);
template &lt;class K> const_iterator find(const K& k) const;
<ins>template &lt;class K> iterator       find(const K& k, size_t hash);
template &lt;class K> const_iterator find(const K& k, size_t hash) const;</ins>
size_type count(const key_type& k) const;
<ins>size_type count(const key_type& k, size_t hash) const;</ins>
template &lt;class K> size_type count(const K& k) const;
<ins>template &lt;class K> size_type count(const K& k, size_t hash) const;</ins>
bool contains(const key_type& k) const;
<ins>bool contains(const key_type& k, size_t hash) const;</ins>
template &lt;class K> bool contains(const K& k) const;
<ins>template &lt;class K> bool contains(const K& k, size_t hash) const;</ins>
pair&lt;iterator, iterator>             equal_range(const key_type& k);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k) const;
<ins>pair&lt;iterator, iterator>             equal_range(const key_type& k, size_t hash);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k, size_t hash) const;</ins>
template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k) const;
<ins>template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k, size_t hash);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k, size_t hash) const;</ins>
</pre>
</blockquote>

In **21.5.6.1 [unord.set.overview]** add:

<blockquote>
<pre>
// set operations:
iterator       find(const key_type& k);
const_iterator find(const key_type& k) const;
<ins>iterator       find(const key_type& k, size_t hash);
const_iterator find(const key_type& k, size_t hash) const;</ins>
template &lt;class K> iterator       find(const K& k);
template &lt;class K> const_iterator find(const K& k) const;
<ins>template &lt;class K> iterator       find(const K& k, size_t hash);
template &lt;class K> const_iterator find(const K& k, size_t hash) const;</ins>
size_type count(const key_type& k) const;
<ins>size_type count(const key_type& k, size_t hash) const;</ins>
template &lt;class K> size_type count(const K& k) const;
<ins>template &lt;class K> size_type count(const K& k, size_t hash) const;</ins>
bool contains(const key_type& k) const;
<ins>bool contains(const key_type& k, size_t hash) const;</ins>
template &lt;class K> bool contains(const K& k) const;
<ins>template &lt;class K> bool contains(const K& k, size_t hash) const;</ins>
pair&lt;iterator, iterator>             equal_range(const key_type& k);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k) const;
<ins>pair&lt;iterator, iterator>             equal_range(const key_type& k, size_t hash);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k, size_t hash) const;</ins>
template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k) const;
<ins>template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k, size_t hash);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k, size_t hash) const;</ins>
</pre>
</blockquote>

In **21.5.7.1 [unord.multiset.overview]** add:

<blockquote>
<pre>
// set operations:
iterator       find(const key_type& k);
const_iterator find(const key_type& k) const;
<ins>iterator       find(const key_type& k, size_t hash);
const_iterator find(const key_type& k, size_t hash) const;</ins>
template &lt;class K> iterator       find(const K& k);
template &lt;class K> const_iterator find(const K& k) const;
<ins>template &lt;class K> iterator       find(const K& k, size_t hash);
template &lt;class K> const_iterator find(const K& k, size_t hash) const;</ins>
size_type count(const key_type& k) const;
<ins>size_type count(const key_type& k, size_t hash) const;</ins>
template &lt;class K> size_type count(const K& k) const;
<ins>template &lt;class K> size_type count(const K& k, size_t hash) const;</ins>
bool contains(const key_type& k) const;
<ins>bool contains(const key_type& k, size_t hash) const;</ins>
template &lt;class K> bool contains(const K& k) const;
<ins>template &lt;class K> bool contains(const K& k, size_t hash) const;</ins>
pair&lt;iterator, iterator>             equal_range(const key_type& k);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k) const;
<ins>pair&lt;iterator, iterator>             equal_range(const key_type& k, size_t hash);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k, size_t hash) const;</ins>
template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k) const;
<ins>template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k, size_t hash);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k, size_t hash) const;</ins>
</pre>
</blockquote>


Feature Testing {#feature-testing}
==================================

The `__cpp_lib_unordered_map_hash_lookup` feature test macro should be added.


Implementation Experience {#implementation}
===========================================

Changes related to that proposal are partially implemented in [GitHub repo](https://github.com/mpusz/unordered_v2)
against [libc++ 5.0.0](https://libcxx.llvm.org).

Simple performance tests provided there proved nearly:
- 20% performance gain for short text
- 50% performance gain for long text


Acknowledgements {#acknowledgements}
====================================

Special thanks and recognition goes to [Epam Systems](http://www.epam.com) for supporting my
membership in the ISO C++ Committee and the production of this proposal.
