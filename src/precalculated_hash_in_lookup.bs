<pre class='metadata'>
Title: Precalculated hash values in lookup
Shortname: D0XXX
Revision: 0
Status: D
Group: WG21
Audience: LEWG, LWG
URL: http://wg21.link/D0XXXr0
Editor: Mateusz Pusz, Epam Systems http://www.epam.com, mateusz.pusz@gmail.com, http://www.train-it.eu
Abstract: This proposal adds...

Repository: mpusz/wg21_papers
!Source: <a href="https://github.com/mpusz/wg21_papers/blob/master/src/precalculated_hash_in_lookup.bs">github.com/mpusz/wg21_papers/blob/master/src/precalculated_hash_in_lookup.bs</a>
Markup Shorthands: markdown on
</pre>


Motivation and Scope {#motivation-and-scope}
============================================



Prior Work {#prior-work}
========================



Impact On The Standard {#impact}
================================

This proposal modifies the unordered associative containers in `<unordered_map>` and `<unordered_set>` by
overloading the lookup member functions with member function templates having one additional parameter.

There are no language changes. 

All existing C++17 code is unaffected.


Design Decisions {#design-decisions}
====================================



Proposed Wording {#wording}
===========================


In **26.5.4.1 [unord.map.overview]** add:

<blockquote>
<pre>
// map operations:
iterator       find(const key_type& k);
const_iterator find(const key_type& k) const;
<ins>iterator       find(const key_type& k, std::size_t hash);
const_iterator find(const key_type& k, std::size_t hash) const;</ins>
template &lt;class K> iterator       find(const K& k);
template &lt;class K> const_iterator find(const K& k) const;
<ins>template &lt;class K> iterator       find(const K& k, std::size_t hash);
template &lt;class K> const_iterator find(const K& k, std::size_t hash) const;</ins>
size_type count(const key_type& k) const;
<ins>size_type count(const key_type& k, std::size_t hash) const;</ins>
template &lt;class K> size_type count(const K& k) const;
<ins>template &lt;class K> size_type count(const K& k, std::size_t hash) const;</ins>
pair&lt;iterator, iterator>             equal_range(const key_type& k);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k) const;
<ins>pair&lt;iterator, iterator>             equal_range(const key_type& k, std::size_t hash);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k, std::size_t hash) const;</ins>
template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k) const;
<ins>template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k, std::size_t hash);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k, std::size_t hash) const;</ins>
</pre>
</blockquote>

In **26.5.5.1 [unord.multimap.overview]** add:

<blockquote>
<pre>
// map operations:
iterator       find(const key_type& k);
const_iterator find(const key_type& k) const;
<ins>iterator       find(const key_type& k, std::size_t hash);
const_iterator find(const key_type& k, std::size_t hash) const;</ins>
template &lt;class K> iterator       find(const K& k);
template &lt;class K> const_iterator find(const K& k) const;
<ins>template &lt;class K> iterator       find(const K& k, std::size_t hash);
template &lt;class K> const_iterator find(const K& k, std::size_t hash) const;</ins>
size_type count(const key_type& k) const;
<ins>size_type count(const key_type& k, std::size_t hash) const;</ins>
template &lt;class K> size_type count(const K& k) const;
<ins>template &lt;class K> size_type count(const K& k, std::size_t hash) const;</ins>
pair&lt;iterator, iterator>             equal_range(const key_type& k);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k) const;
<ins>pair&lt;iterator, iterator>             equal_range(const key_type& k, std::size_t hash);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k, std::size_t hash) const;</ins>
template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k) const;
<ins>template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k, std::size_t hash);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k, std::size_t hash) const;</ins>
</pre>
</blockquote>

In **26.5.6.1 [unord.set.overview]** add:

<blockquote>
<pre>
// set operations:
iterator       find(const key_type& k);
const_iterator find(const key_type& k) const;
<ins>iterator       find(const key_type& k, std::size_t hash);
const_iterator find(const key_type& k, std::size_t hash) const;</ins>
template &lt;class K> iterator       find(const K& k);
template &lt;class K> const_iterator find(const K& k) const;
<ins>template &lt;class K> iterator       find(const K& k, std::size_t hash);
template &lt;class K> const_iterator find(const K& k, std::size_t hash) const;</ins>
size_type count(const key_type& k) const;
<ins>size_type count(const key_type& k, std::size_t hash) const;</ins>
template &lt;class K> size_type count(const K& k) const;
<ins>template &lt;class K> size_type count(const K& k, std::size_t hash) const;</ins>
pair&lt;iterator, iterator>             equal_range(const key_type& k);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k) const;
<ins>pair&lt;iterator, iterator>             equal_range(const key_type& k, std::size_t hash);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k, std::size_t hash) const;</ins>
template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k) const;
<ins>template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k, std::size_t hash);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k, std::size_t hash) const;</ins>
</pre>
</blockquote>

In **26.5.7.1 [unord.multiset.overview]** add:

<blockquote>
<pre>
// set operations:
iterator       find(const key_type& k);
const_iterator find(const key_type& k) const;
<ins>iterator       find(const key_type& k, std::size_t hash);
const_iterator find(const key_type& k, std::size_t hash) const;</ins>
template &lt;class K> iterator       find(const K& k);
template &lt;class K> const_iterator find(const K& k) const;
<ins>template &lt;class K> iterator       find(const K& k, std::size_t hash);
template &lt;class K> const_iterator find(const K& k, std::size_t hash) const;</ins>
size_type count(const key_type& k) const;
<ins>size_type count(const key_type& k, std::size_t hash) const;</ins>
template &lt;class K> size_type count(const K& k) const;
<ins>template &lt;class K> size_type count(const K& k, std::size_t hash) const;</ins>
pair&lt;iterator, iterator>             equal_range(const key_type& k);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k) const;
<ins>pair&lt;iterator, iterator>             equal_range(const key_type& k, std::size_t hash);
pair&lt;const_iterator, const_iterator> equal_range(const key_type& k, std::size_t hash) const;</ins>
template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k) const;
<ins>template &lt;class K> pair&lt;iterator, iterator>             equal_range(const K& k, std::size_t hash);
template &lt;class K> pair&lt;const_iterator, const_iterator> equal_range(const K& k, std::size_t hash) const;</ins>
</pre>
</blockquote>


Feature Testing {#feature-testing}
==================================

The `__cpp_lib_unordered_map_hash_lookup` feature test macro should be added.


Implementation Experience {#implementation}
===========================================

Changes related to that proposal as well as answers to all of the code examples provided in that paper
are implemented in [GitHub repo](https://github.com/mpusz/unordered_v2) against
[libc++ 5.0.0](https://libcxx.llvm.org).


Possible Future Extensions {#future-extensions}
===============================================



Acknowledgements {#acknowledgements}
====================================

Special thanks and recognition goes to [Epam Systems](http://www.epam.com) for supporting my
membership in the ISO C++ Committee and the production of this proposal.
